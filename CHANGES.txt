Changelog of flooding-lib
===================================================

2.96 (unreleased)
-----------------

- Set Django version to 1.4.8 in buildout (only for testing), because
  the tests fail with 1.5+.

- When gridta and gridtd rasters are processed, we use the
  geotransform from the max waterdepth grids, as that is always
  correct while the gridta and gridtd's are sometimes wrong.

- Add some helper functions and tests.


2.95 (2013-09-24)
-----------------

- Add two maps (period of increasing water level, wavefonts) to export runs.
  Let the calculate_export_maps.py script calculate them.


2.94 (2013-09-13)
-----------------

- Replace \\ by os.sep to make presentationlayer generation work on
  Linux.


2.93 (2013-09-13)
-----------------

- PNG generation for gridta results now corrects for the actual start
  time of the breach.


2.92 (2013-09-09)
-----------------

- Update templates to use smartclient v9.0.


2.91 (2013-08-15)
-----------------

- Fix exporttool form for IE.


2.90 (2013-08-14)
-----------------

- Colormaping for resulttype 0 and 1.

2.89 (2013-07-18)
-----------------

- Copy STRUCT3B file in place of STRUCT to sobek model.


2.88 (2013-07-15)
-----------------

- Field 'ror_province' should not be mandatory in the admin.


2.87 (2013-07-12)
-----------------

- Fix error 'To many open files' by exporttool.


2.86 (2013-07-10)
-----------------

- Correctly create ROR approval Excel sheets for each province.

- Don't generate them from the view if they already exist.

- (In flooding) call the script each hour.


2.85 (2013-07-08)
-----------------

- Cache the province a Scenario belongs to. Cache a province's
  scenario statistics.


2.84 (2013-07-03)
-----------------

- Add field 'initialcrest' to ScenarioBreach models for import functionality.


2.83 (2013-07-02)
-----------------

- Fix script calc.py for defining 'waterstandswerloop' points.


2.82 (2013-06-20)
-----------------

- Set permission check on editing of export_run.


2.81 (2013-06-17)
-----------------

- Add functionality to manage initial_level for openbreach task.
- Override filse in model.zip for openbreach task.
- Check with pep8.

2.80 (2013-05-17)
-----------------

- Fix tests.


2.79 (2013-05-16)
-----------------

- Close gdal dataset properly.


2.78 (2013-05-16)
-----------------

- Completed implementation of 'edit' functionality for export tool.


2.77 (2013-05-15)
-----------------

- Revrite calculate_export_maps script to reduce memory usage.

- Add functionality to edit exports (partly implemented).


2.76 (2013-05-07)
-----------------

- Remove creating .csv and .txt files on creating a new ror-export.

- Use gtiff driver in place of mem to reduce memeory usage for ror-export calc.


2.75 (2013-04-22)
-----------------

- Import simplejson from django.utils.


2.74 (2013-04-22)
-----------------

- Define transparency for all values that less then the lowest leftbound.


2.73 (2013-04-17)
-----------------

- Removed import unicode_literals from presentationlayer_generation.py
  due problem with gdal.


2.72 (2013-04-15)
-----------------

- Set max_uncompressed_zip_size to None for removing comment line
  from zips > 1GB.


2.71 (2013-04-09)
-----------------

- Fix bug by seleting a colormap file in task png_generation.


2.70 (2013-04-09)
-----------------

- Close gdal's datasets to reduce memory usage.


2.69 (2013-04-08)
-----------------

- More encoding fixes in export-tool.


2.68 (2013-04-08)
-----------------

- Fix encoding error in export tool.


2.67 (2013-04-08)
-----------------

- Fix problem by ror-export for on creating mem driver.


2.66 (2013-04-08)
-----------------

- Fix problem with empty gridmaxwaterdepth.zip #1.


2.65 (2013-04-04)
-----------------

- Fix bugs with calculating the extent in util.geo.GeoImage (flooding
  #5).


2.64 (2013-03-28)
-----------------

- Reduce loding export scenarios.

- Format datetime string in eexport_run overview.

- Set new filename for export zip.

- Add scenarios list to meta.json for ROR export.

- Add export filepath to meta.json for ROR export.


2.63 (2013-03-26)
-----------------

- Extend meta file for ROR exporttool.

- Reduce memory usage in function to find max_array for ROR exporttool.

- Extend Export run details overview.


2.62 (2013-03-26)
-----------------

- Fix error by missed zipfile.

- Fix error by corrupted zipfile.


2.61 (2013-03-25)
-----------------

- Fix error on crreating export ROR maps.

- Add meta data to export zipfile for ROR


2.60 (2013-03-04)
-----------------

- Fix formating error in filenames.


2.59 (2013-02-26)
-----------------

- Hopefully fix a UTF8 error where the code didn't expect non-ASCII in
  users' full names.


2.58 (2013-02-18)
-----------------

- Added 'liztype' field to 'ExternalWater' model


2.57 (2013-02-12)
-----------------

- Colormap leftbounds should be exclusive.

- Always use a project's colormap, if available.


2.56 (2013-01-25)
-----------------

- Remove comment line in .asc files for task spawn (130).

- Review script spawn.py.

- Add tests for spawn.py.


2.55 (2013-01-23)
-----------------

- Rewrite png_generation script to use numpy and gdal instead of the
  nens.asc libraries.

- Reorganize tests.

- Change 'temporarily_unzipped' so that it can use alternative temp
  directories, and optionally not rezip any changed files.

- Fix issues for running the png_generation under Windows.


2.54 (2013-01-14)
-----------------

- Fix a bug where the importtool tries to convert everything into
  ASCII without reason.


2.53 (2012-12-24)
-----------------

- Add the loading message for exporttool.


2.52 (2012-12-20)
-----------------

- Fix 'Export run details' view.


2.51 (2012-12-20)
-----------------

- Added error handling in task 200 to make it work on production task server.


2.50 (2012-12-19)
-----------------

- Export run now starts workflow template with code 4 (instead of 3).


2.49 (2012-12-19)
-----------------

- Export runs can now have different sized rasters as input. Removed masking
  dijkring, because in the testcase everything was masked away.


2.48.1 (2012-12-17)
-------------------

- Re-release after actually doing git pull. Silly me.


2.48 (2012-12-17)
-----------------

- Added creating ScenarioBreach when creating 3Di scenario. This
  ScenarioBreach is dummy, but it is needed by various flooding components.

- Using objects.get() instead of get() in Scenario.set_value_for_inputfield;
  prevents an error in some cases with uploading Excel sheets.


2.47 (2012-12-12)
-----------------

- Fixed task 210; added field Scenario.result_base_path for 3Di. Traditionally
  the path is retrieved from scenario.breaches[0].region.path.


2.46 (2012-12-06)
-----------------

- Removed dependencies on ThreediModel and ThreediCalculation, everything is
  in Scenario, SobekModel now. Updated task 210, 220.
- Pinnend to lizard-worker >= 0.10, flooding-base >= 1.34

- Added datamigration schema to create a new workflowtemplates for 3di en export maps.

- Added functionality to create a 3di scenario.


2.45 (2012-12-03)
-----------------

- Update status_cache after task 155 (TASK_SOBEK_PRESENTATION_GENERATION).
- Remove "has_hsssm_presentation" field from Scenario model.


2.44 (2012-12-03)
-----------------

- Fixed error in exporttool by mapping filepath.


2.43 (2012-11-29)
-----------------

Approval of an import scenario tried to save the state of approval
checkboxes for each individual inputfield, but those don't exist
anymore. This led to an error. Changed the function so that in this
scenario a value of "True" for the approval is saved.


2.42 (2012-11-28)
-----------------

- Set translation to lazy.


2.41 (2012-11-27)
-----------------

- Updated trans.


2.40 (2012-11-27)
-----------------

- Added selected export maps to export details template.

- Added the translation.


2.39 (2012-11-27)
-----------------

- Added 3Di task 221, which is task 220 except for some different
  options: it makes more detailed maps. Use only for small areas.


2.38 (2012-11-27)
-----------------

- Fix checkboxfields to select maps for export.


2.37 (2012-11-23)
-----------------

- Fix problem by the starting a new sceanrio on import.

- Add checkboxfields to select maps for export.


2.36 (2012-11-22)
-----------------

On the breachinfo page:
- Removed the inundation volume statistic (wasn't used according to
  Kymo)
- Added an Excel download link, which results in the same data as an
  Excel file


2.35 (2012-11-21)
-----------------

Removed the special treatment of values '-999' and '999' in various
database tables (mostly ExtraScenarioInfo) used for scenario metadata.


2.34 (2012-11-21)
-----------------

In exporttool's ExportRun model, all three types of export should have
default=True.


2.33 (2012-11-13)
-----------------

- Fixed filtering error on moving scenarios in exporttool.


2.32 (2012-11-13)
-----------------

- Added functionality to filter scenarios in exporttool.

- Added extra fields to listgrids in exporttool.


2.31 (2012-11-13)
-----------------

- Task 220 now works correctly with the detailed AHN.


2.30 (2012-11-12)
-----------------

- Added detailed map for task 220.

- Moved javascript code from export_new_index.html to screen_exports.js.

2.29 (2012-11-01)
-----------------

Fix three small issues in the scenario info window:
- Ja/Nee instead of True/False
- 'Extern Water' translates to 'Buitenwater'
- List the scenarioid at the top of the fields under Scenario


2.28 (2012-10-31)
-----------------

- Fix problems with util/flshinc. Apparently there is more variety in
  the exact format of FLS files than I thought.


2.27 (2012-10-31)
-----------------

- Replaced os.sep with '/' due problem in windows.


2.26 (2012-10-30)
-----------------

- Added a util/flshinc module to work with fls_h.inc files

- Adapt calculate_scenario_statistics task so that it also calculates
  the inundations stats per hour, based on fls_h.inc, and saves the
  results as JSON

- Added a view to show these results, which is linked from the breach
  info page.


2.25 (2012-10-30)
-----------------

- Added 3Di tasks 210 and 220. Task 210 runs a 3Di scenario and
  produces a .nc file. Task 220 takes the .nc file and generates
  png+pgw files from it.


2.24.2 (2012-10-30)
-------------------

- Fixed error on import perform_task module.


2.24.1 (2012-10-23)
-------------------

- Updating export_run state after finishing calculate_export_maps
  (task 200).

- Updated readme.


2.24 (2012-10-22)
-----------------

- Updated Exporttool.Result to contain only the result file base
  names.

- Added test management task test_task_200.

- Added task 200.

- Fix bug in breachinfo page -- link must use the project id of the
  current page, not the scenario's main project id

2.23 (2012-10-19)
-----------------

Adapt comment line removing functions so that they can also be called
on individual files, and don't depend on the size of /tmp on the
webserver anymore.

Change the zipfile creation functions so that they don't try to do
everything in memory.

Add a link (/flooding/preload/<project_id>/</scenario_id>/) that puts
relevant information in the session and then redirects to the front
page. Code in flooding-base 1.32 then causes the right scenario to
open.

2.22 (2012-10-17)
-----------------

Replaced the parameter 'scenario_id' with 'body' in perform_task function of
'tasks.perform_task' module.


2.21 (2012-10-17)
-----------------

Adds a view that returns a zipfile containing all the result files of a
given scenario, possibly first unzipped. The view checks whether the
user has approval permissions in at least one of the projects the
scenario belongs to.

Adds the view to the breach info page as a 'download' link for each
scenario listed.

Adds a 'check_scenario_permission' method to the permission manager.

2.20 (2012-10-16)
-----------------

- Added tasks and perform_task.py.

- Changed references flooding_worker to lizard_worker.


2.19 (2012-10-15)
-----------------

Added an OpenStreetMap background for the max water depth
images. Synchronized panning and zooming, and checkboxes to turn them
on and off (in case there are many on one page and the user wants to
compare two).

Fix a bug with Excel metadata downloads. This was caused by new mixins
for all class based views, that set all kwargs on the view and always
add a permission manager. This meant that the kwargs weren't sent as
arguments anymore, resulting in an exception. It also meant that the
@receives_permission_manager decorators on class based views can be
removed.

2.18 (2012-10-10)
-----------------

The remove comments script would unzip files that don't fit on the
filesystem. Now it has a fixed limit of 1G for the unzipped files.

Added a management command that can restore the old approval comments
that were lost when we moved to all-approvaltool approvals.

Decreased width of the headers of max water depth images on the breach
info screen; it's nice that the images themselves aren't large, but if
their title is too wide you still can't see them side to side.

2.17.2 (2012-10-09)
-------------------

Don't show images on breach info page if there aren't any for this
scenario.


2.17.1 (2012-10-09)
-------------------

Slightly improve breach info page (don't show None in case of missing
data, give max water depth images a bit of layout)


2.17 (2012-10-08)
-----------------

Fix (?) deleting comment lines at import time.

Work on Breach info page.


2.16 (2012-09-21)
-----------------

If there are ROR scenarios under a breach, and user is allowed to see
them, show an (I) icon next to the breach

Add a view and a template for the page that shows them.

Add several class based view mixins, we're going to use those
consistently from now on.

Start pages.py for standalone pages.

Add methods to Scenario for getting results and presentation layers.

Add new resulttypes for total inundation volume and inundated area.

Make numbers in the new breach info page human readable.

2.15 (2012-09-17)
-----------------

Added functions to walk a directory tree structure and scan all its
files, even files included in .zip files.

Added functions that check if any of those have is an .asc or .inc
with a comment line (starting with /*), and remove it.

Also add a management command for that.

Also add that functionality to uploaded files in the importtool.


2.14 (2012-09-07)
-----------------

Add functionality for auto-start of seanrio's calculation on create
and import a new scenario.


2.13.1 (2012-09-05)
-------------------

Fix a bug in groupimport; a primary key (id=1) was hardcoded for an
approval object type, even though that primary key doesn't exist
anymore in production. It now correctly uses the
default_approval_type() class method.


2.13 (2012-09-03)
-----------------

Add two boolean fields 'has_sobek_presentation' and
'has_hisssm_presentation' to Scenario that will be set to True by
flooding-worker tasks 155 and 185 when they are successful.


2.12 (2012-08-31)
-----------------

Fix two bugs:
- Sometimes a scenario was seen as missing some required metadata, but
  if that metadata is outside of the control of the scenario owner
  that should be ignored
- Sometimes the data owner information (which is used to decide which
  province a scenario is in) is stored as an int, sometimes as a
  string. The province-deciding function can now use both.

2.11.2 (2012-08-29)
-------------------

Uncommented the workflow_template setting lines.


2.11.1 (2012-08-29)
-------------------

Fix: excel_files_for_all_projects only generated files for project 98,
now back to working for all of them.


2.11 (2012-08-29)
-----------------

If a user uploading an Excel file for a project has approval rights in
that project, the approval information in that file as read as well.

Error messages on the ROR dashboard has improved, in the sense that they
are actually shown now. There is also a success message.

Invalid approval values (values other than 0 or 1) now result in an
error message instead of being silently ignored.

2.10 (2012-08-28)
-----------------

- Added functionality to add a workflow_template to new scenario.

- Added migration to create default workflow_templates.

- Add a 'Goedkeuring' sheet to the Excel metadata export. It shows
  scenarioid, scenario identification and scenario name, and the
  approval status for each of the applicable approval rules, plus
  remarks in an extra column. Code for generation and importing is now
  done and unit testing, but not tested "for real" yet because we will
  first make the necessary user interface in a branch.

- Added a 'flooding_lib.sharedproject' sub-app that will hold pages
  and models to do with the ROR and Landelijk gebruik projects.
  A 'ROR dashboard' is now available under /flooding/shared/ror/,
  down- and uploading Excel files per province works.

- Make it mandatory to first collect all the necessary metadata before
  a scenario can be shared.

- Automatically set the value for the 'Metadata complete' approval
  rule when a scenario is accepted into one of the national projects.

2.9 (2012-08-24)
----------------

There were problems related to having a scenario in multiple projects,
approval, and visibility on the site.

- To normal users, only approved scenarios should be visible. This needs
  to check approval status in the right project (the project that gives
  the user viewing rights).

- For users with approval rights, an unapproved scenario is also visible,
  however the approval rights and unapproved status should relate to the
  same project.

- In the user interface, it may have been established that a user can
  see a given scenario, but it is still possible that it should be
  shown to the user only in some projects, not in all the projects the
  scenario may be in.

These issues were fixed.

In general, checking for the scenario statuses 'STATUS_APPROVED' and
'STATUS_DISAPPROVED' is dubious because they related only to the main
project and should maybe be removed in the future.

The scenarioproject table now has a cacheing 'approved' nullboolean that
is faster to use than the equivalent functions on ApprovalObject that need
to hit the database. There is a schema migration and a data migration to
create this field.

2.8 (2012-08-23)
----------------

Fix showing scenarios under projects in the user interface. A scenario
can occur in multiple projects, which means that it should be shown
under both projects in the user interface. Also, if a scenario that is
visible for a user because it is in a project that the user has rights
to is also in another project that the user doesn't have right to, the
second project shouldn't be shown at all. Both fixed.


2.7 (2012-08-21)
----------------

Change the way that select fields in ExtraScenarioInfo rows are saved
(now as a string containing their value). Fix places where they are
displayed, add tests.


2.6.3 (2012-08-17)
------------------

Forgot to add the flooding_lib.util.viewutil module, where I moved a
bit of the views.py code.


2.6.2 (2012-08-17)
------------------

More shall fixes and UI tweaks for the Excel import/export.


2.6.1 (2012-08-16)
------------------

A boolean in an ExtraScenarioInfo field is not an int, but a string
like "1" or "0" -- fix the function that turns it into a bool.

Fix typos in excel_import_export_project.html template.

We can't use a filter on project_id in scenarioproject, needs to be
project__id.


2.6 (2012-08-16)
----------------

Added security checks to Excel download/upload. An Excel upload for a
given project can only modify scenarios that are in that
project. Downloading needs SCENARIO_VIEW rights, uploading
SCENARIO_EDIT.

Made Excel generation more robust. In case of an exception in setting
up a cell (e.g., a scenario has a region.name that isn't in the option
list of the inputfield for region names) then the cell will be filled
with the empty string.

Started code that will allow the fast projects to be created on
demand, while slow projects will only be generated once per hour. The
user is notified of this, including the last modification time of the
available file. It doesn't do proper locking yet so downloading it
while it's being generated anew probably goes wrong, and there isn't
actually any measurement of time yet -- right now, all projects are
considered slow...


2.5.2 (2012-08-15)
------------------

- Nothing changed yet.


2.5.1 (2012-08-15)
------------------

Fix bug where a scenario's status wasn't updated after it was
approved.


2.5 (2012-08-15)
----------------

Decided that dates will always be saved in YYYY-MM-DD where they have
to be stored as strings. Changed importool.DateValue to reflect that.

Improved error checking of Excel import/export.

Improved Excel formatting of dates and numbers.

2.4.2 (2012-08-14)
------------------

Another crash in import: lazy translations of model choices sometimes
need explicit unicode() calls.


2.4.1 (2012-08-14)
------------------

Importing a new scenario relied on a specific ApprovalObjectType id to
exist (1), which doesn't on production. Instead it should use
default_approval_type() class method that was already made for this
exact purpose...


2.4 (2012-08-14)
----------------

Don't show deleted scenarios on the scenario sharing screen.

More work on the Excel export/import. Imported Excel files are now
actually saved in the database. This is still a work in progress.

Fix a bug that prevents Javascript displaying the 'import new
scenario' page (doubly-escaped Javascript).

Some cleanup, more tests, more translated strings.

2.3 (2012-08-09)
----------------

More information about scenarios when offering / accepting them.

Only allow Approved scenarios to be offered.

Fixed display of intervals.

Fixed a few internal server errors where a lazy translation was
immediately returned as a HttpResponse (need to call unicode() on them
first).


2.2.4 (2012-07-31)
------------------

Forgot to add a file...


2.2.3 (2012-07-31)
------------------

Split the scenario sharing screen into a table of projects and a
screen per project, for speed.


2.2.2 (2012-07-31)
------------------

Fix bug in showing the value of a Select field (Variable didn't
exist. Should have made a test in the first place.)


2.2.1 (2012-07-31)
------------------

A few tests weren't updated yet to the latest versions of some methods.


2.2 (2012-07-31)
----------------

Work on Excel import/export.

Started styling data cells in the Excel file (turned wrap on). To do: styling of dates.

Only InputFields relating directly to the current scenario (Scenario,
ScenarioBreach, ExtraScenarioInfo) will be imported. Other fields
(e.g. from Project) will be shown with gray headers for reference in
the Excel file, but ignored by the import.

Screens from exporting and importing Excel screens have been further improved.

Work on getting the fiels to show right in Excel, and then be parsed
correctly afterwards.  Actually entering the imported values into the
database at the end is not implemented yet, nor is checking of
permissions.

Because we are doing a release today, the link in the importtool page to these
exports is disabled.

2.1 (2012-07-26)
----------------

Fixes problems with translating fields from importtool classes (fix:
use ugettext_lazy instead of ugettext, call unicode() in some places).

Adds 'original_scenarios' method to models.Project.

Stops using eval() to parse the "options" part of an InputField;
ast.literal_eval() is safer.

Exporting Excel files mostly works:
    The Excel file format is modelled after the existing format that is
    used by the importtool, and its example Excel files.

    There is a header (the first four rows of the file) and after that,
    one row per scenario in the file.

    In the header, the leftmost column is empty. Then, there is a column
    for each inputfield of the importtool. These are group by header, as
    in the importtool.

    Row 1 holds the name of the header (this will be repeated through
    several columns)

    Row 2 holds the name of the field

    Row 3 holds the type of the field

    Row 4 holds the 'Excel hint' of the field.

    Required fields will have all their text in bold. A field is required
    if it has a "hint_text" containing *, ** or ***. This includes fields
    that don't have "required == True". The reason is that this Excel
    output/input functionality is right now only for updating old data,
    and old data only contains "type 1" scenarios.

    For each row after the header, column 1 will contain the scenario's
    primary key ID field, and the other columns will have the scenario's
    existing data for the field in that column, if any.

    There will be one Excel file per project, and it will contain all the
    scenarios for which that project is the main project. If there are no
    such scenarios, there won't be an Excel file.

See flooding_lib.excel_import_export.py and the excel_files_for_all_projects
management command.

Getting a value out of a scenario using an inputfield (for the infowindow and for
Excel files) is now in Scenario.value_for_inputfield(). Turning a value into a
displayable string is in InputField.display_unicode(value).

Added a simple view for exporting Excel files.

2.0.4 (2012-07-23)
------------------

We check the names of headers in the information infowindow to see if
extra fields should be added there, but depending on the system, the
names are translated or not. Current hackish fix is to test for both.

2.0.3 (2012-07-23)
------------------

- Nothing changed yet.


2.0.2 (2012-07-23)
------------------

Made value_string() fit for use with Unicode-containing strings, and
renamed it to value_unicode().


2.0.1 (2012-07-20)
------------------

Fix a bug where anonymous users couldn't see the regions they are
allowed to see.

Restore the tide waterlevel graph to the scenario information
infowindow.

2.1 (unreleased)
----------------

Overhaul of the approval system. From now on, there will be no
Task-based approval, nor any project-wide 'approved' checkbox. The only
thing we will use is the approval objects from approvaltool, and their
contents will be changed.

Steps taken:
- A large migration removes all the existing approval objects, creates
  a new approval type with one rule ('is this project approved?') and
  for each scenario, connects this approval type to it. The successful
  property of the rule is set based on the old Task-based status.

- Made 'type' in approvaltool.ApprovalObjectType unique. This is the
  identifier we shall be using that relates projects' default approval
  types to database rows in this table.

- Each project now has a field 'approval_object_type' that defines which
  approval object type scenarios in it will use. All existing projects use
  the default one (hand edit ROR and Landelijk gebied when this change
  goes live).

- Scenario.approval_object() method creates the approval object if it
  doesn't exist yet, using the project's default.

- Scenario.main_approval_object() method that does the same but only for
  the main project.

- Add helper functions to ApprovalObject: setup() to create a new
  approvalobject that also enters ApprovalObjectState lines into the
  database, and approved() and disapproved() properties that check
  whether all or some of the states have been filled in.

- Change Scenario.update_status() so that it looks at the approval object
  of the main project for approved and disapproved status. Tasks for
  approval and disapproval are now obsolete.

- Removed the old UI for task-based approval

- Added a ApprovalObjectLog model that logs the history of a certain
  approvalobject/rule combination, ApprovalObjectState doesn't do that
  anymore

Improved the scenario sharing pages.

Approvers of scenarios that they have offered to other projects can
now see the status of their scenarios' approvals in those other
projects.

If a scenario is now approved on some rules and not yet judged on
others (their value is null), it is now neither approved nor
disapproved. Used to be disapproved in this situation. A scenario is
disapproved if its success value is False for at least one of the
rules.

Improved the translations somewhat.

2.0 (2012-07-09)
----------------

"Het kan wel eens 2.0 worden"
  -- Martijn Siemerink, 2012


Solved issue Trac #3684

  After an individual scenario upload, the user can optionally upload
  files.  After uploading, the site used to redirect immediately to
  the import overview screen, but now it redirects to a tiny screen
  with a success message and a link to the overview screen.

Solved issue Trac #3711

  In the export CSV view (flooding_lib.views.scenario_list), ASCII
  strings were used in combination with user-defined data. This led to
  Unicode decoding errors. Working with Unicode only solves the
  problem.

  Instead of writing a CSV file to disk and then reading it back in to
  send it to the browser, we just send it there directly.

  Added a util/csvutil.py to work with Unicode CSV files.

  CSV file generation may well hit timeout limits, depends on the
  query parameters.

1.39 (2012-07-06)
-----------------

We are testing and fixed the following issues:

- Restored a scenario.project_id field for the benefit of the old uitvoerder.py scripts

- Forgot to set field.value_str instead of field.value for the
  scenario ID that we hack into the info window by hand

- 999 was also sometimes used as a sentinel, just like -999. Ignore it too.

- Changed another .project to .main_project

- We should really use Unicode everywhere, people use non-ASCII
  characters and there's no reason why we should crash on them

- Added an 'ignore' directory to .gitignore, helpful to put silly
  temporary files in


1.38.1 (2012-07-06)
-------------------

- Fixed two occurences of 'scenario.project' that should be
  'scenario.main_project' now.


1.38 (2012-07-06)
-----------------

- Solved issues from Trac #3682. In the scenario info window:
  - Coordinates are shown in RD, not WGS84
  - Intervals are shown as '2 d 12:00', not as 2.5
  - Values like '-999' are treated as null values

1.37 (2012-07-02)
-----------------

- Fix issues relating to #3705; obviously import wasn't tested yet and
  there were several typos and things that couldn't work. Works on my
  development machine now.


1.36 (2012-07-02)
-----------------

- Changed scenario fields to null=True to make testing easier

- Added ScenarioProject model

- Changed most of them to new, tested functions

- Changed scenario fields to null=True to make testing easier

- Added 'color_mapping_name' field to 'Project' model (the field
  exists yet, fake it on migration).


1.35 (2012-06-26)
-----------------

- Add breadcrumbs to add files screen in import (#3687)

- Make WAITING the default state for new ImportScenarios (#3685)

- Large scale code formatting (pep8/pyflakes), down to 0 errors from
  ~2300

- Refactor and test import code some more (move functionality from
  views into models)

- Fixed import of Image.

- Added tests for get_scenarios() in UserPermissionManager, test
  multiple projects per scenario

- Got tests to work -- multiple projects per scenario is functional
  now

1.34 (2012-06-20)
-----------------

- Changed the scenario information window. It now:
  - Shows all the headers and fields from the import new scenario screen
  - Adds scenario id, attachments
  To do:
  - some nice things of the old version should be included, like the graph
  - some things have unexpected 'missing' values (like 999) and we don't
    filter for them yet

1.33 (2012-06-15)
-----------------

- Add south migrations for all the apps.


1.32.2 (2012-06-15)
-------------------

- Nothing changed yet.


1.32.1 (2012-06-15)
-------------------

- Nothing changed yet.


1.32 (2012-06-15)
-----------------

- Fix bug with importing Excel dates #3683.


1.31.1 (2012-06-14)
-------------------

- Fix issue with encoding the legend Text.


1.30 (2012-06-14)
-----------------

- Show a legend text above the import new scenario screen.

- Increased flooding-base to 1.24 so we can use its Text model

- Continued refactoring, testing of importtool

- Ticket #3679, adds a legend Text to the new scenario screen.
  Uses a Text from the database with slug 'importnewscenario'.

1.29 (2012-06-12)
-----------------

- Renamed lizard_presentation to flooding_presentation.

- Renamed lizard_visualization to flooding_visualization.

1.28.3 (2012-06-11)
-------------------

- Nothing changed yet.


1.28.2 (2012-06-11)
-------------------

- Now using flooding-worker instead of lizard-flooding-worker.


1.28.1 (2012-06-11)
-------------------

- Nothing changed yet.


1.28 (2012-06-11)
-----------------

- RENAMED lizard-flooding TO flooding_lib

- Moved stuff to Github

- Got tests etc to work


1.27 (2012-05-16)
-----------------

- Nothing changed yet.


1.26 (2012-05-16)
-----------------

- Nothing changed yet.


1.25 (2012-05-10)
-----------------

- Made a field check case insensitive.


1.24 (2012-05-10)
-----------------

- Added extra extra info field headers.


1.23 (2012-05-04)
-----------------

- Nothing changed yet.


1.22 (2012-05-04)
-----------------

- Nothing changed yet.


1.21 (2012-05-04)
-----------------

- Fixed that download view...


1.20 (2012-05-03)
-----------------

- 'Export' button leads to a page with download results for the entire scenario.

- Download file view uses Nginx accelerated redirect to serve the files.


1.19 (2012-04-24)
-----------------

- Nothing changed yet.


1.18 (2012-03-27)
-----------------

- Fixed database settings in services.py.


1.17 (2012-03-07)
-----------------

- Nothing changed yet.


1.16 (2012-03-01)
-----------------

- Nothing changed yet.


1.15 (2012-03-01)
-----------------

- performance improvement for compose form

- made link for linux to resultaten database (bug fix load import)

- create a link to the symbols for visualization (bug fix for channel results)



1.14 (2012-02-29)
-----------------

- Did a release because flooding's buildout is modernized too.
- Slightly modernized buildout (sysegg for GDAL).
- Added workflow_template field to Scenario model.
- Added 'lizard_flooding_task' app.
- Moved tasks dir to 'lizard_flooding_app'.
- Moved 'perform_task' management command to 'lizard_flooding_worker'.


1.13 (2011-05-25)
-----------------

- Nothing changed yet.


1.12 (2011-05-06)
-----------------

- Nothing changed yet.


1.11 (2011-05-06)
-----------------

- Nothing changed yet.


1.10 (2011-04-18)
-----------------

- Nothing changed yet.


1.9 (2011-03-25)
----------------

- Nothing changed yet.


1.8 (2011-03-23)
----------------

- Nothing changed yet.


1.7 (2011-03-03)
----------------

- Nothing changed yet.


1.6 (2011-02-08)
----------------

- Nothing changed yet.


1.5 (2011-02-08)
----------------

- Nothing changed yet.


1.4 (2011-02-07)
----------------

- Nothing changed yet.


1.3 (2011-02-01)
----------------

- Nothing changed yet.


1.2 (2011-01-20)
----------------

- Nothing changed yet.


1.1 (2010-04-23)
----------------

- Making PNG result images working on linux, too.


1.0 (2010-04-21)
----------------

- Added "old" flooding as lizard_flooding.

- Also added "old" visualization and presentation into this very same python
  package as lizard_visualization and lizard_presentation.  WARNING: there are
  now three django apps in one python package.  Necessary as the code was
  pretty much intertwined.

- Initial library skeleton created by nensskel.
