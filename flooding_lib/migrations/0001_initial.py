# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
import flooding_lib.models
import django_extensions.db.fields
import django_extensions.db.fields.json


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('approvaltool', '0001_initial'),
        ('contenttypes', '0001_initial'),
        ('lizard_worker', '0001_initial'),
        ('sharedproject', '0001_initial'),
        ('auth', '0001_initial'),
        ('flooding_presentation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Animation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('frames', models.IntegerField(default=0)),
                ('cols', models.IntegerField(default=0)),
                ('rows', models.IntegerField(default=0)),
                ('maxvalue', models.FloatField(null=True, blank=True)),
                ('geotransform', django_extensions.db.fields.json.JSONField()),
                ('basedir', models.TextField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('object_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=200)),
                ('remarks', models.TextField(null=True, blank=True)),
                ('file', models.FileField(null=True, upload_to=flooding_lib.models.get_attachment_path, blank=True)),
                ('uploaded_by', models.CharField(max_length=200)),
                ('uploaded_date', models.DateTimeField(null=True, blank=True)),
                ('content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'flooding_attachment',
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Breach',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('remarks', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('levelnormfrequency', models.FloatField()),
                ('canalbottomlevel', models.FloatField(null=True, blank=True)),
                ('groundlevel', models.FloatField()),
                ('defrucritical', models.FloatField()),
                ('defbaselevel', models.FloatField(null=True, blank=True)),
                ('decheight', models.FloatField(null=True, blank=True)),
                ('decheightbaselevel', models.FloatField(null=True, blank=True)),
                ('internalnode', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name=b'internal node')),
                ('externalnode', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name=b'external node')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name=b'node itself')),
                ('code', models.CharField(max_length=20, null=True)),
                ('administrator', models.IntegerField(help_text=b'Breach administrator', null=True, blank=True)),
                ('fl_rk_adm_jud', models.IntegerField(help_text=b'Flood risk - administrator judgment (section part)', null=True, blank=True)),
                ('fl_rk_dpv_ref_part', models.IntegerField(help_text=b'Flood risk - DPV reference (section part)', null=True, blank=True)),
                ('fl_rk_dpv_ref_sect', models.IntegerField(help_text=b'Flood risk - DPV reference (dike section)', null=True, blank=True)),
                ('fl_rk_nrm', models.IntegerField(help_text=b'Flood risk - Norm', null=True, blank=True)),
            ],
            options={
                'ordering': ['name'],
                'db_table': 'flooding_breach',
                'verbose_name': 'Breach',
                'verbose_name_plural': 'Breaches',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='BreachSobekModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sobekid', models.CharField(max_length=200)),
                ('breach', models.ForeignKey(to='flooding_lib.Breach')),
            ],
            options={
                'db_table': 'flooding_breachsobekmodel',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Colormap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('matplotlib_name', models.CharField(unique=True, max_length=20)),
                ('description', models.CharField(unique=True, max_length=50)),
            ],
            options={
                'ordering': ('description',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CutoffLocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('bottomlevel', models.FloatField()),
                ('width', models.FloatField()),
                ('deftclose', models.FloatField(null=True, blank=True)),
                ('type', models.IntegerField(choices=[(1, 'lock'), (2, 'culvert'), (3, 'weir'), (4, 'bridge'), (5, 'undefined'), (6, 'generic_internal')])),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name=b'node itself')),
                ('code', models.CharField(max_length=15, null=True)),
            ],
            options={
                'db_table': 'flooding_cutofflocation',
                'verbose_name': 'Cutoff location',
                'verbose_name_plural': 'Cutoff locations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CutoffLocationSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('cutofflocations', models.ManyToManyField(to='flooding_lib.CutoffLocation')),
            ],
            options={
                'db_table': 'flooding_cutofflocationset',
                'verbose_name': 'Cutoff location set',
                'verbose_name_plural': 'Cutoff location sets',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CutoffLocationSobekModelSetting',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sobekid', models.CharField(max_length=200)),
                ('cutofflocation', models.ForeignKey(to='flooding_lib.CutoffLocation')),
            ],
            options={
                'db_table': 'flooding_cutofflocationsobekmodelsetting',
                'verbose_name': 'Cutoff location sobek model setting',
                'verbose_name_plural': 'Cutoff location sobek model settings',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Dike',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'flooding_dike',
                'verbose_name': 'Dike',
                'verbose_name_plural': 'Dikes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EmbankmentUnit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('unit_id', models.CharField(max_length=20)),
                ('type', models.IntegerField(choices=[(0, 'existing'), (1, 'new')])),
                ('original_height', models.FloatField()),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
            ],
            options={
                'db_table': 'flooding_embankment_unit',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ExternalWater',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('type', models.IntegerField(choices=[(1, 'sea'), (2, 'lake'), (3, 'canal'), (4, 'internal_lake'), (5, 'internal_canal'), (6, 'river'), (7, 'unknown'), (8, 'lower_river')])),
                ('liztype', models.IntegerField(blank=True, null=True, choices=[(1, 'sea'), (2, b'estuarium'), (3, b'groot meer (incl. afgesloten zeearm)'), (4, b'grote rivier'), (5, b'scheepvaartkanaal'), (6, b'binnenmeer'), (7, b'regionale beek'), (8, b'regionale revier'), (9, b'boezemwater'), (10, b'polderwater')])),
                ('area', models.IntegerField(null=True, blank=True)),
                ('deftstorm', models.FloatField(null=True, blank=True)),
                ('deftpeak', models.FloatField(null=True, blank=True)),
                ('deftsim', models.FloatField()),
                ('minlevel', models.FloatField(default=-10)),
                ('maxlevel', models.FloatField(default=15)),
                ('code', models.CharField(max_length=15, null=True)),
                ('cutofflocations', models.ManyToManyField(to='flooding_lib.CutoffLocation', blank=True)),
            ],
            options={
                'db_table': 'flooding_externalwater',
                'verbose_name': 'External water',
                'verbose_name_plural': 'External waters',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ExtraInfoField',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=200)),
                ('use_in_scenario_overview', models.BooleanField(default=False)),
                ('header', models.IntegerField(default=20, choices=[(1, 'scenario'), (2, 'location'), (4, 'model'), (5, 'other'), (6, 'files'), (10, 'general'), (20, 'metadata'), (30, 'breaches'), (40, 'externalwater'), (70, 'none')])),
                ('position', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'flooding_extrainfofield',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ExtraScenarioInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.CharField(max_length=100)),
                ('extrainfofield', models.ForeignKey(to='flooding_lib.ExtraInfoField')),
            ],
            options={
                'db_table': 'flooding_extrascenarioinfo',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('remarks', models.TextField(null=True, blank=True)),
                ('active', models.BooleanField(default=True)),
                ('index', models.IntegerField(default=100)),
                ('url', models.CharField(max_length=200)),
                ('layers', models.CharField(max_length=200)),
                ('transparent', models.NullBooleanField(default=None)),
                ('tiled', models.NullBooleanField(default=None)),
                ('srs', models.CharField(default=b'EPSG:900913', max_length=50)),
                ('visible', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'flooding_map',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('reference_adjustment', models.IntegerField(default=0, choices=[(0, 'unkown'), (1, 'existing level'), (2, 'new level')])),
                ('adjustment', models.FloatField(default=0)),
            ],
            options={
                'db_table': 'flooding_measure',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'flooding_program',
                'verbose_name': 'Program',
                'verbose_name_plural': 'Programs',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('friendlyname', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('color_mapping_name', models.CharField(max_length=256, null=True, blank=True)),
                ('code', models.CharField(max_length=20, null=True)),
                ('approval_object_type', models.ForeignKey(default=flooding_lib.models.get_default_approval_type, to='approvaltool.ApprovalObjectType', null=True)),
                ('owner', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('friendlyname', 'name', 'owner'),
                'db_table': 'flooding_project',
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectColormap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('colormap', models.ForeignKey(to='flooding_lib.Colormap')),
                ('presentationtype', models.ForeignKey(to='flooding_presentation.PresentationType')),
                ('project', models.ForeignKey(to='flooding_lib.Project')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectGroupPermission',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('permission', models.IntegerField(choices=[(1, 'view_scenario'), (2, 'add_scenario_new_simulation'), (7, 'add_scenario_import'), (3, 'edit_scenario'), (4, 'approve_scenario'), (5, 'delete_scenario'), (6, 'edit_scenario_simple')])),
                ('group', models.ForeignKey(to='auth.Group')),
                ('project', models.ForeignKey(to='flooding_lib.Project')),
            ],
            options={
                'db_table': 'flooding_projectgrouppermission',
                'verbose_name': 'Project group permission',
                'verbose_name_plural': 'Project group permissions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Raster',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uuid', django_extensions.db.fields.UUIDField(unique=True, editable=False, name=b'uuid', blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('longname', models.CharField(max_length=200)),
                ('active', models.BooleanField(default=True)),
                ('normfrequency', models.IntegerField(null=True, blank=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, verbose_name=b'Region Border')),
                ('path', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, null=True)),
                ('dijkringnr', models.IntegerField(null=True, blank=True)),
                ('cutofflocations', models.ManyToManyField(to='flooding_lib.CutoffLocation', blank=True)),
                ('maps', models.ManyToManyField(to='flooding_lib.Map', blank=True)),
            ],
            options={
                'db_table': 'flooding_region',
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RegionSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('parent', models.ForeignKey(related_name=b'children_set', blank=True, to='flooding_lib.RegionSet', null=True)),
                ('regions', models.ManyToManyField(to='flooding_lib.Region', blank=True)),
            ],
            options={
                'db_table': 'flooding_regionset',
                'verbose_name': 'Region set',
                'verbose_name_plural': 'Region sets',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('resultloc', models.CharField(max_length=200)),
                ('deltat', models.FloatField(null=True, blank=True)),
                ('resultpngloc', models.CharField(max_length=200, null=True, blank=True)),
                ('startnr', models.IntegerField(null=True, blank=True)),
                ('firstnr', models.IntegerField(null=True, blank=True)),
                ('lastnr', models.IntegerField(null=True, blank=True)),
                ('unit', models.CharField(max_length=10, null=True, blank=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('bbox', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, verbose_name=b'Result Border', blank=True)),
                ('animation', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, blank=True, to='flooding_lib.Animation', null=True)),
                ('raster', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, blank=True, to='flooding_lib.Raster', null=True)),
            ],
            options={
                'db_table': 'flooding_result',
                'verbose_name': 'Result',
                'verbose_name_plural': 'Results',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResultType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=50)),
                ('shortname_dutch', models.CharField(max_length=20, null=True, blank=True)),
                ('overlaytype', models.CharField(max_length=20, null=True, blank=True)),
                ('unit', models.CharField(max_length=15, null=True, blank=True)),
                ('color_mapping_name', models.CharField(max_length=256, null=True, blank=True)),
                ('content_names_re', models.CharField(max_length=256, null=True, blank=True)),
                ('use_to_compute_arrival_times', models.BooleanField(default=False, help_text=b'Dit is een animatie die geschikt is om er aankomsttijden mee te berekenen')),
            ],
            options={
                'db_table': 'flooding_resulttype',
                'verbose_name': 'Result type',
                'verbose_name_plural': 'Result types',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResultType_PresentationType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('remarks', models.CharField(max_length=100)),
                ('presentationtype', models.ForeignKey(to='flooding_presentation.PresentationType')),
                ('resulttype', models.ForeignKey(to='flooding_lib.ResultType')),
            ],
            options={
                'db_table': 'flooding_resulttype_presentationtype',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('remarks', models.TextField(default=None, null=True, verbose_name='remarks', blank=True)),
                ('tsim', models.FloatField()),
                ('calcpriority', models.IntegerField(default=20, choices=[(20, 'low'), (30, 'medium'), (40, 'high')])),
                ('status_cache', models.IntegerField(default=None, null=True, choices=[(10, 'deleted'), (20, 'approved'), (30, 'disapproved'), (40, 'calculated'), (50, 'error'), (60, 'waiting'), (70, 'none'), (80, 'archived')])),
                ('migrated', models.NullBooleanField()),
                ('code', models.CharField(max_length=15, null=True)),
                ('project_id', models.IntegerField(null=True)),
                ('has_sobek_presentation', models.NullBooleanField()),
                ('result_base_path', models.TextField(help_text=b'If left blank, the path is retrieved through scenario.breaches[0].region.path', null=True, blank=True)),
                ('config_3di', models.CharField(max_length=50, null=True, blank=True)),
                ('archived', models.BooleanField(default=False, verbose_name='Archived')),
                ('archived_at', models.DateTimeField(null=True, verbose_name='Archived at', blank=True)),
                ('archived_by', models.ForeignKey(related_name=b'archived_by_user', verbose_name='Archived by', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('name', 'owner'),
                'db_table': 'flooding_scenario',
                'verbose_name': 'Scenario',
                'verbose_name_plural': 'Scenarios',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Scenario_PresentationLayer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('presentationlayer', models.ForeignKey(to='flooding_presentation.PresentationLayer')),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
                'db_table': 'flooding_scenario_presentationlayer',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScenarioBreach',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('widthbrinit', models.FloatField()),
                ('methstartbreach', models.IntegerField(choices=[(1, 'at top'), (2, 'at moment x'), (3, 'at crossing level x'), (4, 'unknown/error at import')])),
                ('tstartbreach', models.FloatField()),
                ('hstartbreach', models.FloatField()),
                ('brdischcoef', models.FloatField()),
                ('brf1', models.FloatField()),
                ('brf2', models.FloatField()),
                ('bottomlevelbreach', models.FloatField()),
                ('initialcrest', models.FloatField(null=True, blank=True)),
                ('ucritical', models.FloatField()),
                ('pitdepth', models.FloatField()),
                ('tmaxdepth', models.FloatField()),
                ('extwmaxlevel', models.FloatField()),
                ('extwbaselevel', models.FloatField(default=None, null=True, blank=True)),
                ('extwrepeattime', models.IntegerField(default=None, null=True, blank=True)),
                ('tstorm', models.FloatField(default=None, null=True, blank=True)),
                ('tpeak', models.FloatField(default=None, null=True, blank=True)),
                ('tdeltaphase', models.FloatField(default=None, null=True, blank=True)),
                ('manualwaterlevelinput', models.BooleanField(default=False)),
                ('code', models.CharField(max_length=15, null=True, blank=True)),
                ('breach', models.ForeignKey(to='flooding_lib.Breach')),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
                'db_table': 'flooding_scenariobreach',
                'verbose_name': 'Scenario breach',
                'verbose_name_plural': 'Scenario breaches',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScenarioCutoffLocation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('action', models.IntegerField(default=1, null=True, blank=True)),
                ('tclose', models.FloatField()),
                ('cutofflocation', models.ForeignKey(to='flooding_lib.CutoffLocation')),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
                'db_table': 'flooding_scenariocutofflocation',
                'verbose_name': 'Scenario cutoff location',
                'verbose_name_plural': 'Scenario cutoff locations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScenarioProject',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_main_project', models.BooleanField(default=False)),
                ('approved', models.NullBooleanField()),
                ('approvalobject', models.ForeignKey(default=None, blank=True, to='approvaltool.ApprovalObject', null=True)),
                ('project', models.ForeignKey(to='flooding_lib.Project')),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScenarioShareOffer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('new_project', models.ForeignKey(to='flooding_lib.Project')),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
                ('shared_by', models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SobekModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sobekmodeltype', models.IntegerField(choices=[(1, 'canal'), (2, 'inundation')])),
                ('active', models.BooleanField(default=True)),
                ('project_fileloc', models.CharField(help_text=b'In case of 3Di, point to model zipfile.', max_length=200)),
                ('model_case', models.IntegerField()),
                ('model_version', models.CharField(max_length=20)),
                ('model_srid', models.IntegerField()),
                ('model_varname', models.CharField(help_text=b'In case of 3Di, .mdu filename in zip.', max_length=40, null=True, blank=True)),
                ('model_vardescription', models.CharField(max_length=200, null=True, blank=True)),
                ('remarks', models.TextField(null=True)),
                ('embankment_damage_shape', models.CharField(max_length=200, null=True, blank=True)),
                ('code', models.CharField(max_length=15, null=True, blank=True)),
                ('keep_initial_level', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'flooding_sobekmodel',
                'verbose_name': 'Sobek model',
                'verbose_name_plural': 'Sobek models',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SobekVersion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('fileloc_startfile', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'flooding_sobekversion',
                'verbose_name': 'Sobek version',
                'verbose_name_plural': 'Sobek versions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=100)),
                ('visible_for_loading', models.BooleanField(default=False)),
                ('save_date', models.DateTimeField(null=True, blank=True)),
                ('region', models.ForeignKey(blank=True, to='flooding_lib.Region', null=True)),
                ('user', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'db_table': 'flooding_strategy',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('remarks', models.TextField(blank=True)),
                ('creatorlog', models.CharField(max_length=40)),
                ('tstart', models.DateTimeField()),
                ('tfinished', models.DateTimeField(null=True, blank=True)),
                ('errorlog', models.TextField(null=True, blank=True)),
                ('successful', models.NullBooleanField()),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
                'get_latest_by': 'tstart',
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'db_table': 'flooding_task',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TaskExecutor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('ipaddress', models.IPAddressField()),
                ('port', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
                ('revision', models.CharField(max_length=20)),
                ('seq', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'flooding_taskexecutor',
                'verbose_name': 'Task executor',
                'verbose_name_plural': 'Task executors',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'flooding_tasktype',
                'verbose_name': 'Task type',
                'verbose_name_plural': 'Task types',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ThreediCalculation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.IntegerField(default=1, choices=[(1, b'created'), (2, b'netcdf created'), (3, b'images created, finished.')])),
                ('scenario', models.ForeignKey(to='flooding_lib.Scenario')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ThreediModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=80)),
                ('scenario_zip_filename', models.TextField(help_text=b'full path start with / or folder from Settings.SOURCE_DIR, must contain mdu file')),
                ('mdu_filename', models.TextField(help_text=b'base filename of mdu file')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('permission', models.IntegerField(choices=[(1, 'view_scenario'), (2, 'add_scenario_new_simulation'), (7, 'add_scenario_import'), (3, 'edit_scenario'), (4, 'approve_scenario'), (5, 'delete_scenario'), (6, 'edit_scenario_simple')])),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flooding_userpermission',
                'verbose_name': 'User permission',
                'verbose_name_plural': 'User permissions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Waterlevel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time', models.FloatField()),
                ('value', models.FloatField()),
            ],
            options={
                'db_table': 'flooding_waterlevel',
                'verbose_name': 'Waterlevel',
                'verbose_name_plural': 'Waterlevels',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WaterlevelSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('type', models.IntegerField(choices=[(1, 'undefined'), (2, 'tide'), (3, 'breach')])),
                ('remarks', models.TextField(null=True, blank=True)),
                ('code', models.CharField(max_length=20, null=True)),
            ],
            options={
                'db_table': 'flooding_waterlevelset',
                'verbose_name': 'Waterlevel set',
                'verbose_name_plural': 'Waterlevel sets',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='waterlevel',
            name='waterlevelset',
            field=models.ForeignKey(to='flooding_lib.WaterlevelSet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='waterlevel',
            unique_together=set([('waterlevelset', 'time')]),
        ),
        migrations.AlterUniqueTogether(
            name='userpermission',
            unique_together=set([('user', 'permission')]),
        ),
        migrations.AddField(
            model_name='threedicalculation',
            name='threedi_model',
            field=models.ForeignKey(to='flooding_lib.ThreediModel'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='taskexecutor',
            name='tasktypes',
            field=models.ManyToManyField(to='flooding_lib.TaskType', null=True, blank=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='taskexecutor',
            unique_together=set([('ipaddress', 'port'), ('name', 'seq')]),
        ),
        migrations.AddField(
            model_name='task',
            name='tasktype',
            field=models.ForeignKey(to='flooding_lib.TaskType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='sobekmodel',
            name='sobekversion',
            field=models.ForeignKey(to='flooding_lib.SobekVersion'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='scenarioshareoffer',
            unique_together=set([('scenario', 'new_project')]),
        ),
        migrations.AlterUniqueTogether(
            name='scenariocutofflocation',
            unique_together=set([('scenario', 'cutofflocation')]),
        ),
        migrations.AddField(
            model_name='scenariobreach',
            name='sobekmodel_externalwater',
            field=models.ForeignKey(blank=True, to='flooding_lib.SobekModel', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenariobreach',
            name='tide',
            field=models.ForeignKey(related_name=b'tide', default=None, blank=True, to='flooding_lib.WaterlevelSet', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenariobreach',
            name='waterlevelset',
            field=models.ForeignKey(to='flooding_lib.WaterlevelSet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='scenariobreach',
            unique_together=set([('scenario', 'breach')]),
        ),
        migrations.AddField(
            model_name='scenario',
            name='breaches',
            field=models.ManyToManyField(to='flooding_lib.Breach', through='flooding_lib.ScenarioBreach'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='cutofflocations',
            field=models.ManyToManyField(to='flooding_lib.CutoffLocation', through='flooding_lib.ScenarioCutoffLocation', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='owner',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='presentationlayer',
            field=models.ManyToManyField(to='flooding_presentation.PresentationLayer', through='flooding_lib.Scenario_PresentationLayer'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='projects',
            field=models.ManyToManyField(related_name=b'scenarios', through='flooding_lib.ScenarioProject', to='flooding_lib.Project'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='ror_province',
            field=models.ForeignKey(blank=True, to='sharedproject.Province', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='sobekmodel_inundation',
            field=models.ForeignKey(to='flooding_lib.SobekModel', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='strategy',
            field=models.ForeignKey(default=None, blank=True, to='flooding_lib.Strategy', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='scenario',
            name='workflow_template',
            field=models.ForeignKey(db_column=b'workflow_template', to='lizard_worker.WorkflowTemplate', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='resulttype',
            name='presentationtype',
            field=models.ManyToManyField(to='flooding_presentation.PresentationType', through='flooding_lib.ResultType_PresentationType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='resulttype',
            name='program',
            field=models.ForeignKey(to='flooding_lib.Program'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='result',
            name='resulttype',
            field=models.ForeignKey(to='flooding_lib.ResultType'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='result',
            name='scenario',
            field=models.ForeignKey(to='flooding_lib.Scenario'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together=set([('scenario', 'resulttype')]),
        ),
        migrations.AddField(
            model_name='region',
            name='sobekmodels',
            field=models.ManyToManyField(to='flooding_lib.SobekModel', blank=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='projectgrouppermission',
            unique_together=set([('group', 'project', 'permission')]),
        ),
        migrations.AddField(
            model_name='project',
            name='regions',
            field=models.ManyToManyField(to='flooding_lib.Region', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='project',
            name='regionsets',
            field=models.ManyToManyField(to='flooding_lib.RegionSet', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='measure',
            name='strategy',
            field=models.ManyToManyField(to='flooding_lib.Strategy'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='extrascenarioinfo',
            name='scenario',
            field=models.ForeignKey(to='flooding_lib.Scenario'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='extrascenarioinfo',
            unique_together=set([('extrainfofield', 'scenario')]),
        ),
        migrations.AddField(
            model_name='externalwater',
            name='sobekmodels',
            field=models.ManyToManyField(to='flooding_lib.SobekModel', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='embankmentunit',
            name='measure',
            field=models.ManyToManyField(to='flooding_lib.Measure'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='embankmentunit',
            name='region',
            field=models.ForeignKey(to='flooding_lib.Region'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cutofflocationsobekmodelsetting',
            name='sobekmodel',
            field=models.ForeignKey(to='flooding_lib.SobekModel'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cutofflocation',
            name='sobekmodels',
            field=models.ManyToManyField(to='flooding_lib.SobekModel', through='flooding_lib.CutoffLocationSobekModelSetting'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breachsobekmodel',
            name='sobekmodel',
            field=models.ForeignKey(to='flooding_lib.SobekModel'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='breachsobekmodel',
            unique_together=set([('sobekmodel', 'breach')]),
        ),
        migrations.AddField(
            model_name='breach',
            name='defaulttide',
            field=models.ForeignKey(to='flooding_lib.WaterlevelSet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breach',
            name='dike',
            field=models.ForeignKey(to='flooding_lib.Dike'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breach',
            name='externalwater',
            field=models.ForeignKey(to='flooding_lib.ExternalWater'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breach',
            name='region',
            field=models.ForeignKey(to='flooding_lib.Region'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breach',
            name='sobekmodels',
            field=models.ManyToManyField(to='flooding_lib.SobekModel', through='flooding_lib.BreachSobekModel'),
            preserve_default=True,
        ),
    ]
